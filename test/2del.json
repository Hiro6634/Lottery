  Contract {
  setProvider: [Function (anonymous)],
  currentProvider: [Getter/Setter],
  _requestManager: RequestManager {
    provider: l {
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: 100,
      options: [Object],
      engine: [u],
      manager: [p],
      sendAsync: [Function: bound ],
      send: [Function: bound ],
      close: [Function: bound ],
      _queueRequest: [Function: bound ],
      _processRequestQueue: [Function: bound ],
      _requestQueue: [],
      _requestInProgress: false,
      [Symbol(kCapture)]: false
    },
    providers: {
      WebsocketProvider: [Function: WebsocketProvider],
      HttpProvider: [Function: HttpProvider],
      IpcProvider: [Function: IpcProvider]
    },
    subscriptions: Map(0) {}
  },
  givenProvider: null,
  providers: {
    WebsocketProvider: [Function: WebsocketProvider],
    HttpProvider: [Function: HttpProvider],
    IpcProvider: [Function: IpcProvider]
  },
  _provider: l {
    _events: [Object: null prototype] {
      data: [Function: data],
      connect: [Function: connect],
      error: [Function: error],
      disconnect: [Function: disconnect]
    },
    _eventsCount: 4,
    _maxListeners: 100,
    options: {
      _chainId: 1,
      _chainIdRpc: 1337,
      vmErrorsOnRPCResponse: true,
      verbose: false,
      asyncRequestProcessing: false,
      logger: [Object],
      seed: 'OU2HadnD44',
      mnemonic: 'affair fresh gauge reduce link dolphin truth wise jewel agent jacket tiny',
      network_id: 1659494754516,
      forkCacheSize: 1073741824,
      total_accounts: 10,
      gasPrice: '0x77359400',
      default_balance_ether: 100,
      unlocked_accounts: [],
      hdPath: "m/44'/60'/0'/0/",
      gasLimit: '0x6691b7',
      defaultTransactionGasLimit: '0x15f90',
      time: null,
      debug: false,
      hardfork: 'muirGlacier',
      allowUnlimitedContractSize: false
    },
    engine: u {
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: 100,
      _blockTracker: [i],
      _ready: [i],
      currentBlock: [Object],
      _providers: [Array],
      manager: [p],
      _running: true,
      [Symbol(kCapture)]: false
    },
    manager: p {
      state: [S],
      options: [Object],
      initialized: true,
      initialization_error: null,
      post_initialization_callbacks: [],
      engine: [u],
      currentBlock: [Object]
    },
    sendAsync: [Function: bound ],
    send: [Function: bound ],
    close: [Function: bound ],
    _queueRequest: [Function: bound ],
    _processRequestQueue: [Function: bound ],
    _requestQueue: [],
    _requestInProgress: false,
    [Symbol(kCapture)]: false
  },
  setRequestManager: [Function (anonymous)],
  BatchRequest: [Function: bound Batch],
  extend: [Function: ex] {
    formatters: {
      inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
      inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
      inputCallFormatter: [Function: inputCallFormatter],
      inputTransactionFormatter: [Function: inputTransactionFormatter],
      inputAddressFormatter: [Function: inputAddressFormatter],
      inputPostFormatter: [Function: inputPostFormatter],
      inputLogFormatter: [Function: inputLogFormatter],
      inputSignFormatter: [Function: inputSignFormatter],
      inputStorageKeysFormatter: [Function: inputStorageKeysFormatter],
      outputProofFormatter: [Function: outputProofFormatter],
      outputBigNumberFormatter: [Function: outputBigNumberFormatter],
      outputTransactionFormatter: [Function: outputTransactionFormatter],
      outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
      outputBlockFormatter: [Function: outputBlockFormatter],
      outputLogFormatter: [Function: outputLogFormatter],
      outputPostFormatter: [Function: outputPostFormatter],
      outputSyncingFormatter: [Function: outputSyncingFormatter]
    },
    utils: {
      _fireError: [Function: _fireError],
      _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
      _flattenTypes: [Function: _flattenTypes],
      randomHex: [Function: randomHex],
      BN: [Function: BNwrapped],
      isBN: [Function: isBN],
      isBigNumber: [Function: isBigNumber],
      isHex: [Function: isHex],
      isHexStrict: [Function: isHexStrict],
      sha3: [Function],
      sha3Raw: [Function: sha3Raw],
      keccak256: [Function],
      soliditySha3: [Function: soliditySha3],
      soliditySha3Raw: [Function: soliditySha3Raw],
      encodePacked: [Function: encodePacked],
      isAddress: [Function: isAddress],
      checkAddressChecksum: [Function: checkAddressChecksum],
      toChecksumAddress: [Function: toChecksumAddress],
      toHex: [Function: toHex],
      toBN: [Function: toBN],
      bytesToHex: [Function: bytesToHex],
      hexToBytes: [Function: hexToBytes],
      hexToNumberString: [Function: hexToNumberString],
      hexToNumber: [Function: hexToNumber],
      toDecimal: [Function: hexToNumber],
      numberToHex: [Function: numberToHex],
      fromDecimal: [Function: numberToHex],
      hexToUtf8: [Function: hexToUtf8],
      hexToString: [Function: hexToUtf8],
      toUtf8: [Function: hexToUtf8],
      stripHexPrefix: [Function: stripHexPrefix],
      utf8ToHex: [Function: utf8ToHex],
      stringToHex: [Function: utf8ToHex],
      fromUtf8: [Function: utf8ToHex],
      hexToAscii: [Function: hexToAscii],
      toAscii: [Function: hexToAscii],
      asciiToHex: [Function: asciiToHex],
      fromAscii: [Function: asciiToHex],
      unitMap: [Object],
      toWei: [Function: toWei],
      fromWei: [Function: fromWei],
      padLeft: [Function: leftPad],
      leftPad: [Function: leftPad],
      padRight: [Function: rightPad],
      rightPad: [Function: rightPad],
      toTwosComplement: [Function: toTwosComplement],
      isBloom: [Function: isBloom],
      isUserEthereumAddressInBloom: [Function: isUserEthereumAddressInBloom],
      isContractAddressInBloom: [Function: isContractAddressInBloom],
      isTopic: [Function: isTopic],
      isTopicInBloom: [Function: isTopicInBloom],
      isInBloom: [Function: isInBloom],
      compareBlockNumbers: [Function: compareBlockNumbers],
      toNumber: [Function: toNumber]
    },
    Method: [Function: Method]
  },
  clearSubscriptions: [Function (anonymous)],
  options: {
    address: [Getter/Setter],
    jsonInterface: [Getter/Setter],
    data: undefined,
    from: undefined,
    gasPrice: undefined,
    gas: undefined
  },
  handleRevert: [Getter/Setter],
  defaultCommon: [Getter/Setter],
  defaultHardfork: [Getter/Setter],
  defaultChain: [Getter/Setter],
  transactionPollingTimeout: [Getter/Setter],
  transactionPollingInterval: [Getter/Setter],
  transactionConfirmationBlocks: [Getter/Setter],
  transactionBlockTimeout: [Getter/Setter],
  blockHeaderTimeout: [Getter/Setter],
  defaultAccount: [Getter/Setter],
  defaultBlock: [Getter/Setter],
  methods: {
    manager: [Function: bound _createTxObject],
    '0x481c6a75': [Function: bound _createTxObject],
    'manager()': [Function: bound _createTxObject],
    enter: [Function: bound _createTxObject],
    '0xe97dcb62': [Function: bound _createTxObject],
    'enter()': [Function: bound _createTxObject],
    players: [Function: bound _createTxObject],
    '0xf71d96cb': [Function: bound _createTxObject],
    'players(uint256)': [Function: bound _createTxObject]
  },
  events: { allEvents: [Function: bound ] },
  _address: '0x7089ffAa75d9B65C503526821Dc3D39b7389E966',
  _jsonInterface: [
    {
      constant: true,
      inputs: [],
      name: 'manager',
      outputs: [Array],
      payable: false,
      stateMutability: 'view',
      type: 'function',
      signature: '0x481c6a75'
    },
    {
      constant: false,
      inputs: [],
      name: 'enter',
      outputs: [],
      payable: true,
      stateMutability: 'payable',
      type: 'function',
      signature: '0xe97dcb62'
    },
    {
      constant: true,
      inputs: [Array],
      name: 'players',
      outputs: [Array],
      payable: false,
      stateMutability: 'view',
      type: 'function',
      signature: '0xf71d96cb'
    },
    {
      inputs: [],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'constructor',
      constant: undefined,
      signature: 'constructor'
    }
  ]
}
  